version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - '9092:9092'
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "bruh:1:1"
      KAFKA_ADVERTISED_HOST_NAME: acitkafka.eastus2.cloudapp.azure.com # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://acitkafka.eastus2.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOGS_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/azureuser/kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'gym'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'Password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'Password'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db1:/var/lib/mysql
  receiver:
    build: ../receiver
    ports:
    - '8080:8080'
    depends_on:
    - 'kafka'
  storage:
    build: ../storage
    ports:
    - '8090:8090'
    depends_on:
    - 'db'
    - 'kafka'
  audit_log:
    build: ../audit_log
    ports:
    - '8110:8110'
    depends_on:
    - 'kafka'
  processing:
    build: ../processing
    # network_mode: host
    ports:
    - '8100:8100'
    depends_on:
    - 'storage'
  dashboard:
    build: ../dashboard
    ports:
    - '3000:3000'
    depends_on:
    - 'processing'
    - 'audit_log'
  
volumes:
  my-db1:
